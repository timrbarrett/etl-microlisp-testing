{
  "package": "de.kai_morich.serial_bluetooth_terminal",
  "date": " 20220515-214947",
  "config": {
    "pref_auto_scroll": true,
    "pref_char_delay": "0",
    "pref_charset": "UTF-8",
    "pref_clear_send": false,
    "pref_device_address": "EB:D8:01:DD:02:49",
    "pref_device_le": true,
    "pref_device_name": "ble lisp c/s",
    "pref_device_tab": 1,
    "pref_font_family": "0",
    "pref_font_size": "14",
    "pref_keep_screen_on": false,
    "pref_line_delay": "333",
    "pref_m101_action": 0,
    "pref_m101_mode": 3,
    "pref_m101_name": "1) defun test",
    "pref_m101_value": "'(-------------------- define the essence of testing ers, aeq and teq --------------------)\n'(===todo=== address princ repeating output unneccessarily ===) \n\n(defvar ers 0)\n\n(defun aeq (tst x y) \n  (unless \n    (teq x (eval y) )\n    (incf ers)(princ #\\Newline)(princ ers)(princ ':)(princ tst)(princ #\\Space)(princ 'exp:)(princ x)(princ #\\Space)(princ '!=>)(princ #\\Space)(princ 'got:)(princ (eval y))\n  ) \n)\n\n(defun teq (a b)\n (cond \n   ((and (stringp a) (stringp b)) (string= a b)) \n   ((and (atom a) (atom b)) (eq a b)) \n   ((null a) nil) ((null b) nil) \n   (t (and \n    (teq (car a) (car b)) \n    (teq (cdr a) (cdr b))))))\n\n'(------------------------define test----------------------------------)\n\n(defun test (expected code generations)\n    (list (quote tst)\n        expected\n        code\n        'untested\n        generations)\n)\n\n'(-----define all of tests fields-----)\n\n(defvar test-id 0)\n(defvar test-expected 1)\n(defvar test-code 2)\n(defvar test-result 3)\n(defvar test-expiry 4)\n\n'(--------define all of tests accessor-----------)\n\n(defun get-code (test)\n    (if (testp test)\n        (nth test-code test)))\n\n(defun get-execd-status (test)\n  (nth test-result test)\n)\n\n(defun get-expected (test)\n    (if (testp test)\n       (nth test-expected test)\n))\n\n(defun get-test-result (test)\n    (if (testp test)\n        (nth test-result test)))\n\n'(--------methods that work on tests------)\n\n'(---is this a test type?---)\n(defun testp (test)\n  (eq 'tst (car test))\n)\n\n'(---has the test passed?---)\n(defun passed (test)\n  (if \n    (eq \n      (nth test-expected test) \n      (nth test-result test) \n    ) \n    t\n  )\n)\n\n'(---has the test expired?---)\n(defun expired (test)\n  (if \n    (eq 0 (nth test-expiry test) ) \n    t\n  )\n)\n\n'(---execute the code and store the result---)\n(defun exec-test (test)\n     (setf (nth test-result test)\n        (eval (get-code test)))) \n\n'(---age the test---)\n(defun age-fn (test) \n  (setf \n    (nth test-expiry test) (1- (nth test-expiry test))\n  )\n  (if (expired test) \n    (progn (princ (get-code test))\n                 (princ \" expired\")\n                 (princ #\\Newline)\n                 0\n    )\n  )\n)\n\n\n(aeq 'create-test 'test-pass '(defvar test-pass (test 9 '(* 3 3) 3))) \n(aeq 'create-fail 'test-fail '(defvar test-fail (test 8 '(+ 3 4) 2)))\n(aeq 'create-expiring 'test-expiring '(defvar test-expiring (test 7 '(- 2 3) 1)))\n(aeq 'is-test t '(testp test-pass))\n(aeq 'test-code '(* 3 3) '(get-code test-pass))\n(aeq 'test-status 'untested '(get-execd-status test-pass))\n(aeq 'test-expected 9 '(get-expected test-pass))\n(aeq 'test-result 'untested '(get-test-result test-pass))\n(aeq 'test-aging 0 '(age-fn test-expiring ))\n(aeq 'test-execution 9 '(exec-test test-pass))\n(aeq 'test-passed t (passed test-pass))\n(aeq 'test-failed () (passed test-fail))\n(aeq 'test-expired t (expired test-expiring))\n(aeq 'test-live () (expired test-pass))\n\n(defun not-expired-w-test (test)\n  (if (not (expired test)) (list test) )\n)\n(defun not-passed-w-test (test)\n  (if (not (passed test)) (list test) )\n)\n\n(aeq 'test-not-expired () '(not-expired-w-test test-expiring))\n(aeq 'test-live-not-expiring '((tst 9 (* 3 3) 9 3)) '(not-expired-w-test test-pass))\n(aeq 'test-not-passed () '(not-passed-w-test test-pass))\n(aeq 'test-fail-not-passed '((tst 8 (+ 3 4) untested 2)) '(not-passed-w-test test-fail))",
    "pref_m102_action": 0,
    "pref_m102_mode": 3,
    "pref_m102_name": "fq 1",
    "pref_m102_value": "(etlmock c1fq 1)\n(etlcreate c1fq)",
    "pref_m103_action": 0,
    "pref_m103_mode": 3,
    "pref_m103_name": "acc.count",
    "pref_m103_value": "(etlcount devacc)",
    "pref_m104_action": 0,
    "pref_m104_mode": 3,
    "pref_m104_name": "remove",
    "pref_m104_value": "(defun my-remove (element list)\n  (if (not list)\n    list\n    (if (string= element (first list))\n      (my-remove element (rest list))\n      (cons (first list)\n                 (my-remove element (rest list))))))\n\n(defvar list-one (list \"text one\" \"text two\"))\n(my-remove \"no text found\" list-one)\n(my-remove \"text one\" list-one)\n\n(defun my-length (x) \n  (if (not x) 0 \n    (+ 1 (my-length (cdr x)))))\n\n(defun fn-crx () (defvar crx-targets (my-remove crxcrx crx-targets)))\n(defvar crx-targets (list \"pulses on\" \"other\"))\n\n(my-length crx-targets)\n\n(defvar crx-expiry 2)\n\n(defun outcome () \n  (if \n    (< 0 (my-length crx-targets)) \n    (princ \"failed\") \n    (princ \"passed\")\n  )\n)\n\n(defun fn-1hz () \n  (progn \n    (defvar crx-expiry (- crx-expiry 1)) \n    (if\n      (eq 0 crx-expiry) \n      (outcome)\n    )\n  )\n)",
    "pref_m105_action": 0,
    "pref_m105_mode": 3,
    "pref_m105_name": "!) test etl",
    "pref_m105_value": "(cpp write pulses off) \n(etlclear acc)\n(etlclear meanacc)\n(aeq '(test both cleared) 0 '(+ (etlcount acc)(etlcount meanacc)))\n\n(etlmock acc 10 -20 30)\n(etlcreate acc)\n(aeq '(test meacacc is = to single acc) (list 10 -20 30)'(etloutput meanacc 0))",
    "pref_m106_action": 0,
    "pref_m106_mode": 3,
    "pref_m106_name": "ETL-TEST-CHAIN",
    "pref_m106_value": "(defvar ers 0)\n\n(defun aeq (tst x y) \n  (unless \n    (teq x (eval y) )\n    (incf ers)(princ #\\Newline)(princ ers)(princ ':)(princ tst)(princ #\\Space)(princ 'exp:)(princ x)(princ #\\Space)(princ '!=>)(princ #\\Space)(princ 'got:)(princ (eval y))\n  ) \n)\n\n(defun teq (a b)\n (cond \n   ((and (stringp a) (stringp b)) (string= a b)) \n   ((and (atom a) (atom b)) (eq a b)) \n   ((null a) nil) ((null b) nil) \n   (t (and \n    (teq (car a) (car b)) \n    (teq (cdr a) (cdr b))))))\n\n(defvar read 0)\n(defvar write 1)\n\n(defvar on 1)\n(defvar off 0)\n\n(defvar 1hz-on 2)\n(defvar crx-on 1)\n(defvar pulses 3)\n(defvar ulisp-rtt 4)\n(defvar wakeup-10 5)\n(defvar ch1 6)\n(defvar ch2 7)\n(defvar rpt-on 8)\n\n(cpp write pulses off)\n\n(defvar chain 0)\n(defvar acc 1)\n(defvar meanacc 2)\n(defvar centihzpulse 4)\n(defvar max 3)\n\n(etlcount chain)\n(dotimes (x (etlcount chain))\n   (etloutput chain x)\n)\n\n(etlclear chain)\n(aeq 'chain-is-zero-length 0 (etlcount chain))\n\n(etlcount chain)\n\n(etlcreate centihzpulse)\n(aeq 'chain-is-2-long 2 '(etlcount chain))\n(aeq 'check-most-recent-in-chain-is-meanacc (list meanacc 0) '(etloutput chain 0))\n(aeq 'check-prior-is-acc (list acc 0) '(etloutput chain 1))",
    "pref_m107_action": 0,
    "pref_m107_mode": 3,
    "pref_m107_name": "etl-test-type",
    "pref_m107_value": "(defvar ers 0)\n\n(defun aeq (tst x y) \n  (unless \n    (teq x (eval y) )\n    (incf ers)(princ #\\Newline)(princ ers)(princ ':)(princ tst)(princ #\\Space)(princ 'exp:)(princ x)(princ #\\Space)(princ '!=>)(princ #\\Space)(princ 'got:)(princ (eval y))\n  ) \n)\n\n(defun teq (a b)\n (cond \n   ((and (stringp a) (stringp b)) (string= a b)) \n   ((and (atom a) (atom b)) (eq a b)) \n   ((null a) nil) ((null b) nil) \n   (t (and \n    (teq (car a) (car b)) \n    (teq (cdr a) (cdr b))))))\n\n(defvar type devacc)\n(etlclear type)\n(aeq 'store-is-empty 0 '(etlcount type))\n\n(etlmock type 64 3 4)\n\n(etlcreate type)\n(aeq 'store-has-one 1 '(etlcount type))\n(aeq 'type-can-output (list 64 3 4)  '(etloutput type 0))\n(etlclear type)\n(aeq 'store-is-empty 0 '(etlcount type))",
    "pref_m108_action": 0,
    "pref_m108_mode": 3,
    "pref_m108_name": "test sine",
    "pref_m108_value": "'( setup for moderate pulses on scope)\n(etlmock c1fq 128)\n(etlcreate c1fq)\n(etloutput c1fq 0)\n\n(etlmock c1mx 255)\n(etlcreate c1mx)\n(etloutput c1mx 0)\n\n(etlmock c1pu 127)\n(etlcreate c1pu)\n(etloutput c1pu 0)\n\n(etlmock c1hb 1)\n(etlcreate c1hb)\n(etloutput c1hb 0)\n\n(etlmock c1wl 30)\n(etlcreate c1wl)\n(etloutput c1wl 0)\n\n(etlmock c1pc 0)\n(etlcreate c1pc)\n(etloutput c1pc 0)\n\n(cpp 1 2 1) '(fn-1hz on)\n(defun fn-1hz () (gc))\n(cpp 1 3 1) '(centihzpulses on)",
    "pref_m109_action": 0,
    "pref_m109_mode": 3,
    "pref_m109_name": "2) start of etl testing",
    "pref_m109_value": "\n\n(defvar read 0)\n(defvar write 1)\n\n(defvar on 1)\n(defvar off 0)\n\n(defvar 1hz-on 2)\n(defvar crx-on 1)\n(defvar pulses 3)\n\n(cpp write pulses off)\n\n(defvar acc 1)\n(defvar meanacc 2)\n\n'(---acc---)\n(aeq '(acc is zero) 120 '(etlcount acc))\n(cpp write pulses off)\n(aeq '(acc is 120) 120 '(etlcount acc))\n'(testing if handing on etloutput occurs when we read record 0, when there is no record zero - CONFIRMED AND FIXED)\n(etloutput acc 0)\n(aeq '(test clear) () '(etlclear acc))\n(aeq '(acc.count is 0) 0 '(etlcount acc))\n(aeq '(test no record output) -1 '(etloutput acc 0))\n(aeq '(test mock) () '(etlmock acc 1 2 3))\n(aeq '(test create) () '(etlcreate acc))\n(aeq '(test acc output) (list 1 2 3) '(etloutput acc 0))\n\n'(--- mockacc ---)\n(aeq '(test clear) () '(etlclear meanacc))\n(aeq '(acc.count is 0) 0 '(etlcount meanacc))\n(aeq '(test no record output) -1 '(etloutput meanacc 0))\n(aeq '(test mock) () '(etlmock meanacc 1 2 3))\n(aeq '(test create) () '(etlcreate meanacc))\n(aeq '(test acc output) (list 1 2 3) '(etloutput meanacc 0))",
    "pref_m10_action": 0,
    "pref_m10_mode": 3,
    "pref_m10_name": "def alarm",
    "pref_m10_value": "\n(defvar hrs 9)\n(defvar mns 10)\n(defvar scs 11)\n\n(defvar t-hrs 2)\n(defvar t-mns 55)\n\n(defvar alarm 0)\n(defun fn-1hz ()\n    (if \n        (not (eq alarm 1) )\n        (setf alarm\n            (if (eq hrs t-hrs) \n                 (if (eq mns t-mns)  \n                      t\n                 )\n             )\n        )\n    )\n)\n    ",
    "pref_m110_action": 0,
    "pref_m110_mode": 3,
    "pref_m110_name": "L10",
    "pref_m110_value": "",
    "pref_m1_action": 0,
    "pref_m1_mode": 3,
    "pref_m1_name": "fn-1hz h m s",
    "pref_m1_value": "(defvar acc 1)\n(defvar pulses 3)\n(defvar one-hz 2)\n(defvar max 4)\n\n(defvar hrs 9)\n(defvar mns 10)\n(defvar scs 11)\n(defvar cccs 12)\n\n(defvar read 0)\n(defvar write 1)\n\n(defvar off 0)\n(defvar on 1)\n\n(defun time () (list (cpp read hrs)(cpp read mns)(cpp read scs)(cpp read cccs)(etloutput acc 0)'(etloutput max 0)(gc)))\n\n(defun fn-1hz ()(time))\n\n'(cpp write pulses on)",
    "pref_m201_action": 0,
    "pref_m201_mode": 3,
    "pref_m201_name": "def suite ",
    "pref_m201_value": "(defun suite (name tests) \n  (if (not (listp tests)) \n    \"error: no tests in suite\") \n    (list (quote suite) name tests )\n  )\n\n(defvar suite-id 0)\n(defvar suite-name 1)\n(defvar suite-tests 2)\n\n(defun get-id (m-suite) (nth suite-id m-suite))\n(defun get-tests (m-suite) (nth suite-tests m-suite))\n(defun get-name (m-suite) (nth suite-name m-suite))\n\n(defvar first-suite\n  (suite (quote self-test)\n       (list test-pass test-fail test-expiring)\n   )\n)\n\n(aeq 'test-suite-id 'suite '(get-id first-suite))\n(aeq 'test-suite-name 'self-test '(get-name first-suite))\n(aeq 'test-suite-tests (list test-pass test-fail test-expiring) '(get-tests first-suite))",
    "pref_m202_action": 0,
    "pref_m202_mode": 3,
    "pref_m202_name": "etl aeq",
    "pref_m202_value": "(aeq 'c1hb '(count after clear is zero) 0 '(etlcount c1hb))",
    "pref_m203_action": 0,
    "pref_m203_mode": 0,
    "pref_m203_name": "count c1hb",
    "pref_m203_value": "(etlcount c1hb)",
    "pref_m204_action": 0,
    "pref_m204_mode": 3,
    "pref_m204_name": "*) 1hz off",
    "pref_m204_value": "'(cpp write 1hz-on off)\n(cpp 1 2 0)\n\n'(etlmock ul-1hz 'on)\n'(etlcreate ul-1hz) \n'(microlisp function at 1hz)",
    "pref_m205_action": 0,
    "pref_m205_mode": 0,
    "pref_m205_name": "*) 1hz on",
    "pref_m205_value": "(cpp write 1hz-on on)",
    "pref_m206_action": 0,
    "pref_m206_mode": 0,
    "pref_m206_name": "cpp index too high",
    "pref_m206_value": "(cpp 1 440 45)",
    "pref_m207_action": 0,
    "pref_m207_mode": 3,
    "pref_m207_name": "3) define bool constants",
    "pref_m207_value": "(defvar read 0)\n(defvar write 1)\n\n(defvar on 1)\n(defvar off 0)\n\n(defvar 1hz-on 2)\n(defvar crx-on 1)\n(defvar pulses 3)\n(defvar ulisp-rtt 4)\n(defvar wakeup-10 5)\n(defvar ch1 6)\n(defvar ch2 7)\n(defvar rpt-on 8)",
    "pref_m208_action": 0,
    "pref_m208_mode": 0,
    "pref_m208_name": "crx on",
    "pref_m208_value": "(cpp write crx-on on)",
    "pref_m209_action": 0,
    "pref_m209_mode": 0,
    "pref_m209_name": "crx off",
    "pref_m209_value": "(cpp write crx-on off)",
    "pref_m210_action": 0,
    "pref_m210_mode": 3,
    "pref_m210_name": "etl test def",
    "pref_m210_value": "\n\n(etlmock c1hb 0)\n(etlcreate c1hb)\n(etlmock c1mx 0)\n(etlcreate c1mx)\n(defun fn-1hz () (gc))\n'(c1fq c1fi c1pu c1mx)\n'(c1hb c1wl c1pc c1fq)\n\n(defvar error-log ())\n(defvar errs 0)\n(defun print-error (ty test exp got)\n  (progn\n     '(princ ty)'(princ #\\Space)'(princ test)'(princ #\\Space)'(princ (eval got))'(princ #\\Space)'(princ \"fail\")\n  )\n)\n(defun aeq (t2 test exp got)\n  (unless\n    (teq exp (eval got) )\n    (progn\n       (push (list t2 test exp (eval got)) error-log)\n       (incf errs)\n       '(print-error t2 test exp got)\n    )\n  )\n)\n(defun teq (a b)\n(cond\n   ((and (stringp a) (stringp b)) (string= a b))\n   ((and (atom a) (atom b)) (eq a b))\n   ((null a) nil) ((null b) nil)\n   (t (and\n    (teq (car a) (car b))\n    (teq (cdr a) (cdr b))))))\n\n(defun my-length (x)\n  (if (not x) 0\n    (+ 1 (my-length (cdr x)))))\n\n(defun test-etlclear(type)\n     (etlclear (eval type))\n     (aeq type 'etlclear 0 '(etlcount (eval type)) )\n)\n(defun test-etlmock(type)\n     (etlmock (eval type) 2)\n     (aeq type 'etlmock 1 '(etlcount (eval type)) )\n)\n\n\n(defun tests1to5 (type)\n    (progn\n        (princ type) '(princ #\\Newline)\n        (test-etlclear type)\n        (test-etlmock type)\n\n        (princ #\\Newline)\n        '(fib 20)\n    )\n)\n\n(defun etl-test (type-list)\n    (mapc tests1to5 type-list)\n    (princ error-log)\n    (princ errs)\n    (princ #\\Newline)\n)\n\n'(trace test-etlclear)\n'(trace print-error)\n(untrace aeq)\n\n \n\n\n",
    "pref_m2_action": 0,
    "pref_m2_mode": 3,
    "pref_m2_name": "c1pu =   1",
    "pref_m2_value": "(etlmock c1pu 1)\n(etlcreate c1pu)",
    "pref_m301_action": 0,
    "pref_m301_mode": 0,
    "pref_m301_name": "(",
    "pref_m301_value": "(",
    "pref_m302_action": 0,
    "pref_m302_mode": 0,
    "pref_m302_name": ")",
    "pref_m302_value": ")",
    "pref_m303_action": 0,
    "pref_m303_mode": 3,
    "pref_m303_name": "*) lcl pulses on",
    "pref_m303_value": "(cpp write pulses off)",
    "pref_m304_action": 2,
    "pref_m304_mode": 0,
    "pref_m304_name": "mock c1mx 100)",
    "pref_m304_value": "output c1mx)",
    "pref_m305_action": 2,
    "pref_m305_mode": 0,
    "pref_m305_name": "(etl",
    "pref_m305_value": "(etl",
    "pref_m306_action": 0,
    "pref_m306_mode": 0,
    "pref_m306_name": "princ crxcrx",
    "pref_m306_value": "(princ crxcrx)",
    "pref_m307_action": 0,
    "pref_m307_mode": 0,
    "pref_m307_name": "def crxcrx",
    "pref_m307_value": "(defvar crxcrx \"other\")",
    "pref_m308_action": 0,
    "pref_m308_mode": 3,
    "pref_m308_name": "trace test",
    "pref_m308_value": "(defun sq (x) (* x x))\n(trace sq)\n(sq 3)",
    "pref_m309_action": 0,
    "pref_m309_mode": 0,
    "pref_m309_name": "princ on-crx",
    "pref_m309_value": "(princ on-crx)",
    "pref_m310_action": 0,
    "pref_m310_mode": 0,
    "pref_m310_name": "(fn-crx)",
    "pref_m310_value": "(fn-crx)",
    "pref_m3_action": 0,
    "pref_m3_mode": 3,
    "pref_m3_name": "c1pu = 127",
    "pref_m3_value": "(etlmock c1pu 127)\n(etlcreate c1pu)\n\n(defun aeq (type test exp got) \n  (unless \n    (teq exp (eval got) )\n    (progn \n       '(push (list type test exp (eval got)) error-log)\n       (incf errs)\n       (princ type) (princ \":\") (princ test) (princ \" \") (princ exp) (princ \" \") (princ (eval got)) (princ \"fail\")\n    )\n  ) \n)",
    "pref_m401_action": 0,
    "pref_m401_mode": 3,
    "pref_m401_name": "error-log",
    "pref_m401_value": "(princ error-log)",
    "pref_m402_action": 0,
    "pref_m402_mode": 3,
    "pref_m402_name": "mx, pc, wl",
    "pref_m402_value": "(etl-test '( c1mx c1pc c1wl))\n",
    "pref_m403_action": 0,
    "pref_m403_mode": 3,
    "pref_m403_name": "fi, pu, vp",
    "pref_m403_value": "(etl-test '(c1fi c1pu c1vp))",
    "pref_m404_action": 0,
    "pref_m404_mode": 3,
    "pref_m404_name": "clear error-log",
    "pref_m404_value": "(defvar error-log ())",
    "pref_m405_action": 0,
    "pref_m405_mode": 3,
    "pref_m405_name": "c1wl&c1pc",
    "pref_m405_value": "(etlmock c1wl 807)\n(etlcreate c1wl)\n'(etloutput c1pc 0)",
    "pref_m406_action": 0,
    "pref_m406_mode": 3,
    "pref_m406_name": "remote pulses on",
    "pref_m406_value": "(if \n  (null  (blectx (concatenate 'string \"echo on\" (string #\\Newline))) )\n  \"no connection to central\"\n  (blectx (concatenate 'string \"pulses on\" (string #\\Newline)))\n)",
    "pref_m407_action": 0,
    "pref_m407_mode": 0,
    "pref_m407_name": "test crx",
    "pref_m407_value": "(aeq 'ble_c \"utc\" (subseq crxcrx 0 3) )",
    "pref_m408_action": 0,
    "pref_m408_mode": 3,
    "pref_m408_name": "pulses off",
    "pref_m408_value": "(blectx \n  (concatenate 'string \"pulses on\" \n    (string #\\Newline)\n  )\n)",
    "pref_m409_action": 0,
    "pref_m409_mode": 3,
    "pref_m409_name": "*) rpt on",
    "pref_m409_value": "(cpp write rpt-on on)",
    "pref_m410_action": 0,
    "pref_m410_mode": 0,
    "pref_m410_name": "string=",
    "pref_m410_value": "(aeq 'ble_c \"utc\" (subseq crxcrx 0 3) )",
    "pref_m4_action": 0,
    "pref_m4_mode": 3,
    "pref_m4_name": "defun aeq",
    "pref_m4_value": "(defvar error-log ())\n(defvar errs 0)\n\n(defun aeq (type test exp got) \n  (unless \n    (teq exp (eval got) )\n    (progn \n       (push (list type test exp (eval got)) error-log)\n       (incf errs)\n       (princ test)(princ got)(princ \"fail\")\n    )\n  ) \n)\n(defun teq (a b)\n (cond \n   ((and (stringp a) (stringp b)) (string= a b)) \n   ((and (atom a) (atom b)) (eq a b)) \n   ((null a) nil) ((null b) nil) \n   (t (and \n    (teq (car a) (car b)) \n    (teq (cdr a) (cdr b)))))",
    "pref_m5_action": 0,
    "pref_m5_mode": 3,
    "pref_m5_name": "test etl types",
    "pref_m5_value": "(etlmock c1hb 0)\n(etlcreate c1hb)\n(etlmock c1mx 0)\n(etlcreate c1mx)\n\n(defun fn-1hz () (gc))\n\n(defvar error-log ())\n(defvar pass-log ())\n(defvar errs 0)\n(untrace teq)\n\n(defun print-error (ty test exp got) \n  (progn \n     (princ ty)(princ #\\Space)(princ test)'(princ #\\Space)'(princ (eval got))'(princ #\\Space)'(princ \"fail\")\n  )\n)\n(defun aeq (t2 test exp got) \n  (unless \n    (teq exp (eval got) )\n    (progn \n       (push (list t2 test exp (eval got)) error-log)\n       (incf errs)\n       '(print-error t2 test exp got)\n       (princ t2)\n    )\n  ) \n)\n(defun teq (a b)\n (cond \n   ((and (stringp a) (stringp b)) (string= a b)) \n   ((and (atom a) (atom b)) (eq a b)) \n   ((null a) nil) ((null b) nil) \n   (t (and \n    (teq (car a) (car b)) \n    (teq (cdr a) (cdr b))))))\n\n(defun my-length (x) \n  (if (not x) 0 \n    (+ 1 (my-length (cdr x)))))\n\n(defun test-etlcount(type)\n    (etlclear (eval type))\n    (aeq type 'etlcount 0 '(etlcount (eval type)) )\n)\n(defun test-etlclear(type)\n     (etlclear (eval type))\n     (aeq type 'etlclear 0 '(etlcount (eval type)) )\n)\n(defun test-etlmock(type)\n     (etlmock (eval type) 2)\n     (aeq type 'etlmock 0 '(etlcount (eval type)) )\n)\n(defun test-etlcreate(type)\n    (etlcreate (eval type))\n    (aeq \n         type\n         'etlcreate \n         1 \n         '(etlcount (eval type)) \n     )\n)\n(defun test-etloutput(type)\n    (unless\n        (teq\n            (etloutput (eval type) 0)\n            (list type 2)\n        ) \n       (progn\n          (push (list type 'output (etloutput (eval type) 0) (list type 2) error-log)\n          (incf errs)\n          (princ type)\n        )\n    )\n)\n\n(defun tests1to5 (type)\n    (progn \n        (princ type)\n        (test-etlcount type)\n        (test-etlclear type)\n        (test-etlmock type)\n        (test-etlcreate type)\n        (test-etloutput type)\n    )\n)\n\n(defun etl-test (type-list)\n    (mapc tests1to5 type-list)\n    (princ #\\Newline)\n    (princ error-log)\n    (princ #\\Newline)\n    (princ errs)\n    (princ #\\Newline)()\n)\n\n'(trace test-etlcount)\n'(trace etloutput)\n'(trace aeq)\n'(trace tests1to5)\n'(trace etl-tests)",
    "pref_m6_action": 0,
    "pref_m6_mode": 0,
    "pref_m6_name": "test power",
    "pref_m6_value": " (cpp ch1 write off) ",
    "pref_m7_action": 0,
    "pref_m7_mode": 3,
    "pref_m7_name": "test devroa",
    "pref_m7_value": "(defvar error-log ())\n(defvar errs 0)\n(defun print-error (ty test exp got) \n  (progn \n     '(princ ty)'(princ #\\Space)'(princ test)'(princ #\\Space)'(princ (eval got))'(princ #\\Space)'(princ \"fail\")\n  )\n)\n(defun aeq (t2 test exp got) \n  (unless \n    (teq exp (eval got) )\n    (progn \n       (push (list t2 test exp (eval got)) error-log)\n       (incf errs)\n       (print-error t2 test exp got)\n    )\n  ) \n)\n(defun teq (a b)\n (cond \n   ((and (stringp a) (stringp b)) (string= a b)) \n   ((and (atom a) (atom b)) (eq a b)) \n   ((null a) nil) ((null b) nil) \n   (t (and \n    (teq (car a) (car b)) \n    (teq (cdr a) (cdr b))))))\n\n'(devacc-tests)\n'(devmea-tests)\n\n'(devroa-tests)\n'(setup) (etlclear devmea)(etlclear devroa)\n\n(etlmock devmea 2 4 -8)\n(etlcreate devmea)\n(aeq 'devroa 'test-simple-roas-calc \"(devroa 9.1651513)\" '(etloutput devroa 0))\n\n'(etlcreate devchp)",
    "pref_m8_action": 0,
    "pref_m8_mode": 0,
    "pref_m8_name": "(globals)",
    "pref_m8_value": "(globals)",
    "pref_m9_action": 0,
    "pref_m9_mode": 0,
    "pref_m9_name": "(room)",
    "pref_m9_value": "(room)",
    "pref_macro_rows": "5",
    "pref_receive_buffer_size": "0",
    "pref_receive_display_mode": "0",
    "pref_receive_newline": "LF",
    "pref_save_directory": "content://com.android.providers.downloads.documents/tree/downloads",
    "pref_send_display_mode": "0",
    "pref_send_newline": "Auto",
    "pref_show_send": false,
    "pref_show_status": true,
    "pref_show_timestamp": true,
    "pref_timestamp_format": "HH:mm:ss.SSS"
  }
}